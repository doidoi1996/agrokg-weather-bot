import asyncio
import os
import logging
from datetime import datetime, time as dt_time, timezone, timedelta

import requests
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7303047610:AAHraj24cjD94JTOGb-9ncD9RY0GG1QO-j4")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID", "@agrokg_msh")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY", "31f0e42c1bc0d2e6301f9d0452b75ad1")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "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")

openai.api_key = OPENAI_API_KEY

CITIES = ["–ë–∏—à–∫–µ–∫", "–ê–ª–∞–º–µ–¥–∏–Ω", "–ß—É–π", "–°–æ–∫—É–ª—É–∫"]
user_selected_city = {}  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def get_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city},KG&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return {
            "temp": data["main"]["temp"],
            "feels_like": data["main"]["feels_like"],
            "description": data["weather"][0]["description"],
            "humidity": data["main"]["humidity"],
            "wind_speed": data["wind"]["speed"],
            "precipitation": data.get("rain", {}).get("1h", 0)
        }
    else:
        print(f"[!] –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã ({city}): {response.status_code} - {response.text}")
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç OpenAI
def get_farming_advice(weather_data, crop):
    prompt = (
        f"–Ø —Ñ–µ—Ä–º–µ—Ä. –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {weather_data['description']}, "
        f"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {weather_data['temp']}¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å {weather_data['humidity']}%. "
        f"–Ø –≤—ã—Ä–∞—â–∏–≤–∞—é {crop}. –î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —ç—Ç–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π –≤ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö."
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–≥—Ä–æ–Ω–æ–º-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=200
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò."

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def format_weather_message(city, weather_data, advice, crop=None):
    base = (
        f"üìç –ì–æ—Ä–æ–¥: {city}\n"
        f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}:\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather_data['feels_like']}¬∞C)\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_data['description']}\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
        f"–í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å\n"
        f"–û—Å–∞–¥–∫–∏: {weather_data['precipitation']} –º–º\n\n"
    )
    if crop:
        base += f"üåæ –°–æ–≤–µ—Ç—ã –ø–æ –∫—É–ª—å—Ç—É—Ä–µ: *{crop}*\n{advice}"
    else:
        base += f"üåæ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{advice}"
    return base

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(city, callback_data=city)] for city in CITIES]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=reply_markup)

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city = query.data
    user_selected_city[query.from_user.id] = city
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {city}. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –∫—É–ª—å—Ç—É—Ä—É –≤—ã –≤—ã—Ä–∞—â–∏–≤–∞–µ—Ç–µ.")

# –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç ‚Äî –∫—É–ª—å—Ç—É—Ä–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    crop = update.message.text.strip()
    city = user_selected_city.get(user_id)

    if not city:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    weather_data = get_weather(city)
    if weather_data:
        advice = get_farming_advice(weather_data, crop)
        message = format_weather_message(city, weather_data, advice, crop)
        await update.message.reply_text(message, parse_mode="Markdown")
    else:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}.")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª
async def daily_weather(context: ContextTypes.DEFAULT_TYPE):
    for city in CITIES:
        weather_data = get_weather(city)
        if weather_data:
            advice = get_farming_advice(weather_data, "–ø—à–µ–Ω–∏—Ü–∞")
            message = format_weather_message(city, weather_data, advice)
            await context.bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=message)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞
    KYRGYZ_TZ = timezone(timedelta(hours=6))
    app.job_queue.run_daily(daily_weather, time=dt_time(hour=7, tzinfo=KYRGYZ_TZ))

    await app.run_polling()

if __name__ == "__main__":
    import logging
    import nest_asyncio

    logging.basicConfig(level=logging.INFO)
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    nest_asyncio.apply()

    asyncio.get_event_loop().run_until_complete(main())


