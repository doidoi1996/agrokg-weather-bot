import asyncio
import os
from datetime import datetime, time as dt_time, timezone, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)

import requests

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
XAI_API_KEY = os.getenv("XAI_API_KEY")

# === –ì–æ—Ä–æ–¥–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ===
CITIES = ["–ë–∏—à–∫–µ–∫", "–ê–ª–∞–º–µ–¥–∏–Ω", "–ß—É–π", "–°–æ–∫—É–ª—É–∫"]

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã ===
def get_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city},KG&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return {
            "temp": data["main"]["temp"],
            "feels_like": data["main"]["feels_like"],
            "description": data["weather"][0]["description"],
            "humidity": data["main"]["humidity"],
            "wind_speed": data["wind"]["speed"],
            "precipitation": data.get("rain", {}).get("1h", 0)
        }
    return None

# === –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç xAI ===
def get_farming_advice(weather_data):
    prompt = (
        f"–ü–æ–≥–æ–¥–∞: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {weather_data['temp']}¬∞C, {weather_data['description']}, "
        f"–≤–ª–∞–∂–Ω–æ—Å—Ç—å {weather_data['humidity']}%. –î–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤."
    )
    headers = {
        "Authorization": f"Bearer {XAI_API_KEY}",
        "Content-Type": "application/json"
    }
    try:
        response = requests.post("https://api.x.ai/v1/grok", json={"prompt": prompt}, headers=headers)
        if response.status_code == 200:
            return response.json().get("response", "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–≥–æ–¥–æ–π –∏ –ø–æ–ª–∏–≤–∞–π—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ XAI API: {e}")
    return "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–≥–æ–¥–æ–π –∏ –ø–æ–ª–∏–≤–∞–π—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã."

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ ===
def format_weather_message(city, weather_data, advice):
    return (
        f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}:\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather_data['feels_like']}¬∞C)\n"
        f"–ü–æ–≥–æ–¥–∞: {weather_data['description']}\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
        f"–í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å\n"
        f"–û—Å–∞–¥–∫–∏: {weather_data['precipitation']} –º–º\n\n"
        f"üåæ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤:\n{advice}"
    )

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [[InlineKeyboardButton(city, callback_data=city)] for city in CITIES]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    city = update.message.text.strip()
    weather_data = get_weather(city)
    if weather_data:
        advice = get_farming_advice(weather_data)
        message = format_weather_message(city, weather_data, advice)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    city = query.data
    weather_data = get_weather(city)
    if weather_data:
        advice = get_farming_advice(weather_data)
        message = format_weather_message(city, weather_data, advice)
        await query.message.reply_text(message)
    else:
        await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}.")

# === –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª ===
async def daily_weather(context: ContextTypes.DEFAULT_TYPE) -> None:
    for city in CITIES:
        weather_data = get_weather(city)
        if weather_data:
            advice = get_farming_advice(weather_data)
            message = format_weather_message(city, weather_data, advice)
            await context.bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=message)

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(button))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞)
    KYRGYZSTAN_TZ = timezone(timedelta(hours=6))
    app.job_queue.run_daily(daily_weather, time=dt_time(hour at 7, minute=0, tzinfo=KYRGYZSTAN_TZ))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
