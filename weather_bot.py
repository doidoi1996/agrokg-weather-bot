import requests
import telegram
import asyncio
import schedule
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = '7303047610:AAHraj24cjD94JTOGb-9ncD9RY0GG1QO-j4'  # –í–∞—à —Ç–æ–∫–µ–Ω Telegram
TELEGRAM_CHANNEL_ID = '@agrokg_msh'  # –í–∞—à –∫–∞–Ω–∞–ª
OPENWEATHER_API_KEY = '31f0e42c1bc0d2e6301f9d0452b75ad1'  # –í–∞—à OpenWeatherMap –∫–ª—é—á
XAI_API_KEY = 'xai-I7OLtQjEl3G2WUeEVmevXucGwByarxvvxWdcKXtr6N7DJFxnGLpIwepVDLc59gJuE34L47n7XWCECdx5'  # –í–∞—à xAI –∫–ª—é—á

# –†–∞–π–æ–Ω—ã –ë–∏—à–∫–µ–∫–∞ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–µ–π
REGIONS = {
    '–ë–∏—à–∫–µ–∫': {'lat': 42.8746, 'lon': 74.5698},
    '–ê–ª–∞–º–µ–¥–∏–Ω': {'lat': 42.8800, 'lon': 74.6300},
    '–ß—É–π': {'lat': 42.8167, 'lon': 73.9833},
    '–°–æ–∫—É–ª—É–∫': {'lat': 42.8500, 'lon': 74.3000}
}

async def get_weather(lat, lon, region_name):
    try:
        # –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
        url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()
        
        if data['cod'] != 200:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {region_name}: {data['message']}"
        
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        weather_desc = data['weather'][0]['description']
        wind_speed = data['wind']['speed']
        rain = data.get('rain', {}).get('1h', 0)  # –û—Å–∞–¥–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (–º–º)
        
        # –ó–∞–ø—Ä–æ—Å –∫ xAI API –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        xai_response = requests.post(
            'https://api.x.ai/v1/grok',
            headers={'Authorization': f'Bearer {XAI_API_KEY}'},
            json={
                'prompt': (
                    f"–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã –≤ {region_name}: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å {humidity}%, "
                    f"–≤–µ—Ç–µ—Ä {wind_speed} –º/—Å, –æ—Å–∞–¥–∫–∏ {rain} –º–º, –æ–ø–∏—Å–∞–Ω–∏–µ: {weather_desc}. "
                    f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ–≤), "
                    f"—É—á–∏—Ç—ã–≤–∞—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω—É–∂–¥—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ –ë–∏—à–∫–µ–∫."
                )
            }
        )
        recommendations = xai_response.json().get('response', "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Ö–æ–¥.")
        
        message = (
            f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {region_name} –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"–ü–æ–≥–æ–¥–∞: {weather_desc}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f"–û—Å–∞–¥–∫–∏: {rain} –º–º\n\n"
            f"üåæ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤:\n{recommendations}"
        )
        return message
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

async def send_daily_forecast(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    for region, coords in REGIONS.items():
        message = await get_weather(coords['lat'], coords['lon'], region)
        await bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=message, parse_mode='Markdown')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(region, callback_data=region)] for region in REGIONS]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    region = query.data
    if region in REGIONS:
        coords = REGIONS[region]
        message = await get_weather(coords['lat'], coords['lon'], region)
        await query.message.reply_text(message, parse_mode='Markdown')
    else:
        await query.message.reply_text("–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    for region in REGIONS:
        if region.lower() in text:
            coords = REGIONS[region]
            message = await get_weather(coords['lat'], coords['lon'], region)
            await update.message.reply_text(message, parse_mode='Markdown')
            return
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë–∏—à–∫–µ–∫' –∏–ª–∏ '–ê–ª–∞–º–µ–¥–∏–Ω') –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞."
    )

def schedule_task():
    schedule.every().day.at("07:00").do(lambda: asyncio.run(send_daily_forecast(app)))

async def main():
    global app
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    await app.run_polling()

if __name__ == "__main__":
    import platform
    if platform.system() == "Emscripten":
        asyncio.ensure_future(main())
    else:
        import threading
        threading.Thread(target=schedule_task, daemon=True).start()
        asyncio.run(main())